<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE topic
  SYSTEM "https://resources.jetbrains.com/writerside/1.0/xhtml-entities.dtd">
<topic xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:noNamespaceSchemaLocation="https://resources.jetbrains.com/writerside/1.0/topic.v2.xsd"
       title="Usage &amp; DSL" id="Usage-DSL">

  <!--The plugin provides a DSL for stages, jobs, and steps:
  azurePipeline {
  name.set("Example Pipeline")
  trigger.set(listOf("main"))

  stages {
      stage("Build") {
          displayName.set("Build Stage")
          jobs {
              job("buildJob") {
                  steps {
                      step("gradleBuild") {
                          task("Gradle@3") {
                              displayName.set("Run Gradle Build")
                              inputs.put("tasks","clean build")
                          }
                      }
                  }
              }
          }
      }
  }
}	•	stages → call stage("Name")
•	jobs → call job("Name")
•	steps → call step("Name")
•	task(…) → references an Azure Pipelines task, e.g. "Gradle@3", "Maven@3", "Npm@1", etc.
•	script(…) → simple script steps.

Top-Level Fields
•	name: Pipeline name (name.set("My Pipeline"))
•	trigger: Branch triggers (list property).
•	pr: Pull Request triggers.
•	vmImage: Build agent image (e.g. ubuntu-latest).
•	variables: Key-value environment variables for pipeline.
•	parameters: List of parameter definitions for paramName → defaultValue.

Stage-Level Fields
•	displayName
•	dependsOn: A list of other stage names.
•	condition: e.g. always()
•	variables: Key-value environment variables.

Job-Level Fields
•	displayName
•	dependsOn (list)
•	continueOnError
•	steps (a map or list of steps)

Step-Level Fields
•	script: Inline script content.
•	task: e.g. "Gradle@3".
•	displayName
•	inputs: For tasks.
•	env, condition, etc.
  -->

  <chapter title="Basic Usage" id="basic-usage">
    <p>
      The plugin provides a DSL for stages, jobs, and steps:
    </p>
    <code-block lang="kotlin">
      azurePipeline {
        name.set("Example Pipeline")
        trigger.set(listOf("main"))

        stages {
          stage("Build") {
            displayName.set("Build Stage")
            jobs {
              job("buildJob") {
                steps {
                  step("gradleBuild") {
                    task("Gradle@3") {
                      displayName.set("Run Gradle Build")
                      inputs.put("tasks", "clean build")
                    }
                  }
                }
              }
            }
          }
        }
      }
    </code-block>
    <deflist>
      <def title="Stages" id="stages">stages → call stage("Name")</def>
      <def title="Jobs" id="jobs">jobs → call job("Name")</def>
      <def title="Steps" id="steps-1">steps → call step("Name")</def>
      <def title="Task" id="task-metadata">task(…) → references an Azure Pipelines task, e.g. "Gradle@3", "Maven@3", "Npm@1", etc.</def>
      <def title="Script Steps" id="script-steps">script(…) → simple script steps.</def>
    </deflist>
    <p>
      <b>Top-Level Fields</b>
    </p>
    <deflist>
      <def title="Name" id="name">name: Pipeline name (name.set("My Pipeline"))</def>
      <def title="Trigger" id="trigger">trigger: Branch triggers (list property).</def>
      <def title="Pull Request Triggers" id="pull-request-triggers">pr: Pull Request triggers.</def>
      <def title="VM Image" id="vmImage">vmImage: Build agent image (e.g. ubuntu-latest).</def>
      <def title="Variables" id="variables-1">variables: Key-value environment variables for pipeline.</def>
      <def title="Parameters" id="parameters">parameters: List of parameter definitions for paramName → defaultValue.</def>
    </deflist>
    <p>
      <b>Stage-Level Fields</b>
    </p>
    <deflist>

      <def title="Display Name" id="display-name-2">displayName</def>
      <def title="Depends On" id="depends-on-2">dependsOn: A list of other stage names.</def>
      <def title="Condition" id="condition">condition: e.g. always()</def>
      <def title="Variables" id="variables">variables: Key-value environment variables.</def>
    </deflist>
    <p>
      <b>Job-Level Fields</b>
    </p>
    <deflist>
      <def title="Display Name" id="display-name">displayName</def>
      <def title="Depends On" id="depends-on">dependsOn (list)</def>
      <def title="Continue on Error" id="continue-on-error">continueOnError</def>
      <def title="Steps" id="steps">steps (a map or list of steps)</def>
    </deflist>
    <p>
      <b>Step-Level Fields</b>
    </p>
    <deflist>
      <def title="Script" id="script">script: Inline script content.</def>
      <def title="Task" id="task">task: e.g. "Gradle@3".</def>
      <def title="Display Name" id="display-name-1">displayName</def>
      <def title="Inputs" id="inputs">inputs: For tasks.</def>
      <def title="Environment and Condition" id="environment-and-condition">env, condition, etc.</def>
    </deflist>
  </chapter>
</topic>