/*
 * This source file was generated by the Gradle 'init' task
 */
package org.dorkag.azure_devops

import org.dorkag.azure_devops.exceptions.PipelineConfigurationException
import org.dorkag.azure_devops.extensions.AzurePipelineExtension
import org.dorkag.azure_devops.extensions.AzurePipelineSubProjectExtension
import org.dorkag.azure_devops.tasks.GenerateRootPipelineTask
import org.dorkag.azure_devops.tasks.GenerateSubprojectTemplateTask
import org.dorkag.azure_devops.tasks.ValidatePipelineTask
import org.gradle.api.Project
import org.gradle.api.Plugin

/**
 * A simple 'hello world' plugin.
 */
class AzureDevopsPluginPlugin : Plugin<Project> {
    override fun apply(project: Project) {
        if (project == project.rootProject) {
            applyToRootProject(project)
            validateBaseConfiguration(project)
        } else {
            applyToSubproject(project)
        }


    }


    private fun applyToRootProject(project: Project) {
        project.extensions.create("azurePipeline", AzurePipelineExtension::class.java, project.objects)
        project.tasks.register("generatePipeline", GenerateRootPipelineTask::class.java)
        project.tasks.register("validatePipeline", ValidatePipelineTask::class.java)

    }

    private fun applyToSubproject(project: Project) {
        project.extensions.create("azurePipeline", AzurePipelineSubProjectExtension::class.java)

        project.tasks.register("generateSubprojectTemplate", GenerateSubprojectTemplateTask::class.java)

    }

    private fun validateBaseConfiguration(project: Project) {
        // Add validation to the project's afterEvaluate phase
        project.afterEvaluate {
            val extension = project.extensions.findByType(AzurePipelineExtension::class.java)
                ?: throw PipelineConfigurationException("AzurePipelineExtension not configured")

            // Basic validation
            if (extension.stages.isEmpty()) {
                throw PipelineConfigurationException("At least one stage must be configured")
            }

            // Validate each stage has jobs
            extension.stages.forEach { stage ->
                if (stage.jobs.isEmpty()) {
                    throw PipelineConfigurationException("Stage '${stage.name}' must contain at least one job")
                }
            }
        }
    }

}
